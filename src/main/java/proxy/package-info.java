/**
 * 
 */
/**
 * @author TGP
 * @version 代理模式(Proxy Pattern)
 * 代理模式(Proxy Pattern)为其他的对象增加一个代理对象，进行访问控制。
 * 从而避免直接访问一个对象，造成效率或者安全性上的降低。
 * 静态代理：
 *         代理类接受一个Subject接口的对象，任何实现该接口的对象，都可以通过代理类进行代理，增加了通用性。
 *         但是也有缺点，每一个代理类都必须实现一遍委托类（也就是realsubject）的接口，如果接口增加方法，则代理类也必须跟着修改。
 *         其次，代理类每一个接口对象对应一个委托对象，如果委托对象非常多，则静态代理类就非常臃肿，难以胜任。
 *  动态代理：
 *         动态代理有别于静态代理，是根据代理的对象，动态创建代理类。这样，就可以避免静态代理中代理类接口过多的问题。
 *         动态代理是实现方式，是通过反射来实现的，借助Java自带的java.lang.reflect.Proxy,通过固定的规则生成。
 *         其步骤如下：
 *                 1、编写一个委托类的接口，即静态代理的（Subject接口）
 *                 2、实现一个真正的委托类，即静态代理的（RealSubject类）
 *                 3、创建一个动态代理类，实现InvocationHandler接口，并重写该invoke方法
 *                 4、在测试类中，生成动态代理的对象。
 */
package proxy;